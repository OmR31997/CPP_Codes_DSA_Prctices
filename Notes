/** Introduction **/
C++ was developed by "Bjarne Stroustrup" in 1985 is extesion of C language.

/** Variable **/
Variable are used to store data.
A variable in C++ is a named memory location (or container) that can store a value which can change during program execution.
    - If the value can change, it's a regular variable.
    - If the value must not change, we use the const keyword, making it a constant.

/** Data Type **/
A data type in C++ determines the kind of value a variable can store, such as integers, characters, floating-point numbers, etc.
    - How much memory to allocate
    - What kind of operations are allowed
    - What kind of values the variable can hold
    1. int 4 Byte
    2. float 4 Byte
    3. double 8 Byte  
    4. char 1 Byte
    5. string if 'Krishna' then 32 Byte
    6. bool 1 Byte
    
Note: When work with char[] extra 1 byte used for the null terminator (\0).
Note: "Krishna" has 7 letters, but string object may take 24, 32, or more bytes.

/** Type Casting **/
Type Casting means converting a variable from one data type to another.
Two Types in C++: (‚Üí Implication Symbol & ‚áî Birectional Symbol)
1. Type Coercion/Conversion/Implicit (Automatic) is usually used to Low Data Type ‚Üí High Data Type
2. Type Casting/Explicit (Manual) is usually used to Low Data Type ‚Üê High Data Type  

/** Input/Output Object **/
cout << is used to display output on the screen.
cin >> is used to take input from the user through the keyboard.

/** Operators **/
An operator is a symbol/keyword that performs a specific operation on one or more operands (values or variables).
1. Arithmatic : To perform some mathematical operation.
2. Relational : To find the relation between two situation and return something in the form of "true" or "false". 
3. Logical : Perform between two relation the give return something in the form of "true" or "false".
4. Unary : Unary operator always has single or one operands.

/** Conditional Statement**/
A "Condtional Statement" is a way to make decisions in a program - it allows the program to choose different action based on whether a condition is "true" or "false".
1. if, if-else, if-else if-else

/** Function **/
A funtion is s reusable block of code that perform a specific task and function provides:
    1. Reusability 
    2. Modularity (Agile)
    3. Scalability (Scale Upgrading)
    4. Readability
    5. Reduces Redundancy (Unecessary Repetion Line Of Codes)

    There have two things
    0. Literal: A literal is a value that cannot be changed. It remains the same across languages like Java, C#, and C++.
                Example: int a = 10; // 10 is an integer literal
                         float pi = 3.14; // 3.14 is a float literal
                         char ch = 'A'; // 'A' is a char literal
                         string name = "OM"; // "OM" is a string literal
                         sum(21, 20); //Calling time
    1. Arguments: They are the actual values pass to the function and is also called literals.
    2. Parameters: Parameter is nothing but that copy of the argument.

void main(): Main function returns nothing.
int main(): Main function returns an integer (status).

/** Function In Memory **/
In C++, There have types of memory
1. Stack Memory (Static Memory Allocation)
2. Heep Memory (Dynamic Memory Allocation)

|        |
----------
|        |
----------
|        |
----------
|  main  |    Stack Frame
----------
Call Stack

Stack Memory in C/C++ (and most languages with a call stack):
When a C/C++ program starts, the main() function is automatically called by the compiler/runtime system.
This causes a stack frame to be created in stack memory, which stores:
 - Local variables of main()
 - Return address
 - Function parameters (if any)

Function Call Behavior:
1. When main() calls another function (e.g., func1()), a new stack frame is created on top of the previous one.
2. If func1() calls another function (e.g., func2()), another frame is pushed on top of that.
3. This continues for each function call.
4. When a function returns, its stack frame is popped (removed) from the stack, and control goes back to the previous function.
5. This process continues until the program ends.

Example
-----------------------------------------------------------------
void func2() {
    int z = 30;
    // func2's stack frame created
}

void func1() {
    int y = 20;
    func2();  // func2's frame goes on top
    // func2's frame gets popped after return
}

int main() {
    int x = 10;
    func1();  // func1's frame goes on top of main
    return 0;
}
-----------------------------------------------------------------

/** Pass By Value **/
In pass by value, a copy of the actual argument is passed to the function.
When a primitive type variable (like int, float, char) is passed, the function receives a copy, so the original variable remains 
unchanged even if the function modifies it.

----------------------------------------------------------------
#include <stdio.h>

void update(int num) {
    num = num + 10;  // Changes only the copy
    printf("Inside function: %d\n", num);
}

int main() {
    int x = 5;
    update(x);
    printf("Outside function: %d\n", x);  // x is still 5
    return 0;
}
----------------------------------------------------------------

/** Number System**/
A number system is a way to represent and express numbers using a set of symbols (digits) and
a base (radix). In data structures, it's essential for encoding data and performing operations 
in binary, decimal, octal, or hexadecimal formats.

A Number System in data structures refers to the method of representing numbers using different
bases (radices). Since computers operate using electrical signals (ON/OFF), they fundamentally 
use binary (base-2), but humans commonly use decimal (base-10). Understanding number systems is critical in data structures for:
1. Data Representation ‚Äì How data (integers, characters, etc.) is stored in memory.
2. Memory Addressing ‚Äì Hexadecimal is often used to represent memory locations.
3. Bit-level Operations ‚Äì Many data structures (like bit arrays, tries, bloom filters) rely on binary operations.
üßÆ Common Number Systems:
| Name            | Base | Digits Used | Example             |
| --------------- | ---- | ----------- | ------------------- |
| Binary          | 2    | 0, 1        | 1010 (binary of 10) |
| Decimal         | 10   | 0‚Äì9         | 123                 |
| Octal           | 8    | 0‚Äì7         | 17 (octal of 15)    |
| Hexadecimal     | 16   | 0‚Äì9, A‚ÄìF    | 1F (hex of 31)      |

Example Use in Data Structures:
- Binary Trees use binary numbers for traversal.
- Bit Manipulation helps in optimizing space in structures like hash maps.
- Hex used in memory dumps and debugging tools.

Note: Each and evey digital electronic device understand only binary system.

/** Biwise Operators**/
A Bitwise Operator is a type of operator that works on the binary representation of integers. 
Although it appears to operate on decimal numbers, the actual operation is performed at the binary (bit) level.

1. Bitwise AND(&)
Ex: 2&3
    2: 10
    3: 11
    -----=10 which is in decimal 2

2. Bitwise OR(|)
Ex: 8&4
    8: 1000
    4: 0100
    ------=1100 which is in decimal 12

3. Bitwise LEFT_SHIFT(<<)
Ex: 
    3<<2: a*2^b 
    3: 11
     1100: 12

4. Bitwise RIGHT_SHIFT(>>)
Ex: 
    3<<1: a/2^b
    3: 11
       01:1

5. Bitwise XOR(^)
Ex:
    4^2: 
    100
    010
    --110 which is in decimal 6

/** Operator Precendence **
| Operators       | Precendence | Associative Order   |
| --------------- | ----------- | ------------------- |
| !, +, - (Unary) | First       | R-L                 |
| *, /, %         | Second      | L-R                 | 
| +, -            | Third       | L-R                 | 
| Bitwise         |             |                     |
| <, <=, >=, >    | Fourth      | L-R                 |
| ==, !=          | Fift        | L-R                 | 
| &&              | Sixth       | L-R                 |
| ||              | Seventh     | L-R                 |
| =               | Last        | R-L                 |     
Note: Our Point Of View Based Direction

/** Scope **/
Scope in programming refers to the region or context within a program where a variable is defined and can be accessed or used.
Variable Types
1. Local Scope Variable: Variable is accessible only within the block/function it was declared.
2. Block Scope Variable: Variable is accessible only in { } block.
3. Global Scope Variable: Variable is accessible anywhere in the program.
4. Function Scope Variable: Variables declared inside a function, accessible only within that function.
4. Instance Scope Variable: In JavaScript with Class, An instance variable is a variable that belongs to an object (instance) created from a class.
Each object has its own copy of instance variables.

/** Data Type Modifier **/
In programming, a data type modifier changes the meaning or behavior of a basic data type.

For example, an `int` in C/C++ usually uses 4 bytes = 32 bits. Each bit can be 0 or 1.
So total values = 2^32.

But in a **signed int**, the first bit (MSB) is used to represent the sign:
- 0 means positive
- 1 means negative

So:
- Max positive = (2^31) - 1 = 2,147,483,647
- Min negative = -2^31 = -2,147,483,648

If we need a number bigger than 2^31 - 1, we can use:
- `unsigned int` ‚Üí removes negative range, gives 0 to 2^32 - 1
- `long` or `long long` ‚Üí increases range up to 2^64 (in 64-bit systems)

1. long
2. short
3. long long
4. signed
5. unsigned

/** Data Structure **/
A Data  Structure is way to store and organize data in memory in a structured and optimized manner.
In other word we can say, A data structure is a specialized format for organizing, processing, and storing data in a way that enables 
efficient access and modification. 

Examples: arrays, linked lists, stacks, queues, trees, and graphs.

/** Array Syntax **/
An array is a type of non-primitive data structure used to store multiple values of the same data type in contiguous, linear, and
organized manner.
Array Architecture Visualization
+--------+--------+--------+--------+--------+
|  10    |  20    |  30    |  40    |  50    |
+--------+--------+--------+--------+--------+
   ‚Üë        ‚Üë        ‚Üë        ‚Üë        ‚Üë
 Index 0  Index 1  Index 2  Index 3  Index 4

| Part                  | What It Means                                                                                     |
| --------------------- | ------------------------------------------------------------------------------------------------  |
| Array Elements        | The actual values stored (like `10`, `20`, etc.)                                                  |
| Index                 | Position of an element in the array (starts from `0`)                                             |
| Base Address          | Memory address of the first element (not shown here, but exists internally like: 1004, 1008, ...) |
| Contiguous Memory     | All elements are stored **one after another in memory** (no gaps)                                 |

Declartion: -
int arr[] = {elem_1, elem_2, elem_2,.....elem_n};
int arr[5]; //after assigning

Assigning Values in Array
arr[1] = 25, arr[2] = 20

Note: An array has a fixed size, so we must ensure that values are stored only within valid index positions (0 to length ‚àí 1). 
Accessing or storing values outside this range may lead to undefined behavior or garbage values. 

/** Loops on Array **/

To Read Array Variable
 int arr[] = {25, 20, 29, 30, 36}; 
 int size = sizeof(arr)/sizeof(int);
 for(int i=0; i<size; i++)
 {
   cout <<arr[i];   
 }

To Assign Values Into Array
 int size = 5;
 int arr[size];
 for(int i=0; i<size; i++)
 {
   cin >>arr[i];
 }

/** Pass By Reference(Address, Actual value change) **/

/** Linear Search **/
